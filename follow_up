-- -- HELPER QUERIES
-- SELECT DISTINCT(product_name)
-- FROM core.orders;

-- select DISTINCT(purchase_platform)
-- FROM core.orders;

-- North Star metrics (sales, AOV, order counts) for 
-- Macbooks sold in North America for each quarter across all years
SELECT 
  extract(year from purchase_ts) as year,
  extract(quarter from purchase_ts) as quarter,
  COUNT(DISTINCT(orders.id)) as order_count, 
  ROUND(SUM(usd_price),2) as sales,
  ROUND(AVG(usd_price),2) as aov
FROM core.orders orders
  left join core.customers customers on customers.id=orders.customer_id 
  left join core.geo_lookup geo on geo.country=customers.country_code
WHERE product_name LIKE '%Macbook%' AND
  region='NA'
GROUP BY 1, 2
ORDER BY 1, 2;


-- Region with average highest time to deliver for products
-- purchased in 2022 on the website OR purchased on mobile in any year
SELECT geo.region, ROUND(AVG(date_diff(delivery_ts, ship_ts, day)),3) as avg_delivery_time
FROM core.order_status o_status
  left join core.orders orders on o_status.order_id = orders.id
  left join core.customers cust on orders.customer_id = cust.id
  left join core.geo_lookup geo on cust.country_code = geo.country
WHERE (extract(year from o_status.purchase_ts)=2022
  AND orders.purchase_platform = 'website') OR
  orders.purchase_platform = 'mobile app'
GROUP BY geo.region
ORDER BY 2 DESC
LIMIT 1;

-- BONUS
SELECT geo.region, 
  ROUND(AVG(date_diff(o_status.delivery_ts, o_status.purchase_ts, week)),3) as avg_delivery_time
FROM core.order_status o_status
  left join core.orders orders on o_status.order_id = orders.id
  left join core.customers cust on orders.customer_id = cust.id
  left join core.geo_lookup geo on cust.country_code = geo.country
WHERE (extract(year from o_status.purchase_ts)=2022
  AND orders.purchase_platform = 'website') OR
  (extract(year from o_status.purchase_ts)=2021 AND
    lower(orders.product_name) LIKE '%samsung%')
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1;


-- Refund rate and refund count for each product overall? 
-- Checked for dupe orders/refunds
SELECT 
  CASE WHEN product_name='27in"" 4k gaming monitor' then '27in 4K gaming monitor' else product_name end as product_name_clean,
  COUNT(refund_ts) as refund_ct,
  SUM(CASE WHEN refund_ts is not null then 1 else 0 end) as refunds_ct,
  ROUND(AVG(CASE WHEN refund_ts is not null then 1 else 0 end) * 100,3) as refund_rate
FROM core.orders orders
  left join core.order_status status on orders.id=status.order_id
GROUP BY 1
ORDER BY 4 DESC;


-- Most popular product within each region
with sales_by_product as (
  select region,
  product_name,
  count(distinct orders.id) as total_orders
from core.orders
left join core.customers
  on orders.customer_id = customers.id
left join core.geo_lookup
  on geo_lookup.country = customers.country_code
group by 1,2)

select *, 
	row_number() over (partition by region order by total_orders desc) as order_ranking
from sales_by_product
qualify row_number() over (partition by region order by total_orders desc) = 1;


-- Time to from order creation to order purchase 
-- compared between loyalty customers vs. non-loyalty customers
SELECT loyalty_program,
  ROUND( AVG(date_diff(purchase_ts, created_on, day)), 3) as days_to_purchase
FROM core.customers cust
  left join core.orders orders on cust.id=orders.customer_id
GROUP BY loyalty_program;

SELECT cust.loyalty_program,
  orders.purchase_platform,
  COUNT(*) as orders_ct,
  ROUND( AVG(date_diff(orders.purchase_ts, cust.created_on, day)), 3) as days_to_purchase
FROM core.customers cust
  left join core.orders orders on cust.id=orders.customer_id
GROUP BY 1, 2
ORDER BY 1;